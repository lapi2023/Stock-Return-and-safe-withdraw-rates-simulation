import datetime
import os
import statistics
import time
import pandas
from stock_calculation import utils
from matplotlib import pyplot

out_dir = "graph_output/Return_Simulation/Return_Simulation_buy_and_sell_on_target_return/"

def plot_return_histogram(ticker, invest_years, target_annualized_return):
    dump_dir = f"Return_Simulation/Return_Simulation_Timing/buy_and_sell_on_target_return/dump/{ticker}_{invest_years}years_targetAnnualizedReturn_{target_annualized_return}/"
    loaded_dic = utils.load_dump(dump_dir, "asset_list", "asset_result_list")
    asset_list = loaded_dic["asset_list"]
    asset_result_list = loaded_dic["asset_result_list"]
    # plot
    pyplot.hist(
        asset_list,
        bins = 500,
    )
    pyplot.xlim()

    utils.make_dir(out_dir + "hist/")
    pyplot.savefig(out_dir + f"hist/{ticker}_{invest_years}years_hist.png")

def plot_table(ticker, invest_years):
    def table_plot(df, title, outputPath):
        fig, ax = pyplot.subplots()
        ax.axis('off')
        list = [i / 100 for i in range(4, 12, 1)]
        ax.table(cellText=df.values,
                 colLabels=df.columns,
                 colLoc="center",
                 colWidths=[1/(len(list) + 1)] * (len(list) + 1),
                 rowLabels=df.index,
                 rowLoc="center",
                 loc='center',
                 # bbox=[0, 0, 1, 1]
                 )
        ax.set_title(title)
        pyplot.savefig(outputPath)

    row_min_list = []
    row_mean_list = []
    row_median_list = []
    row_max_list = []
    row_sd_list = []
    row_sr_list = []
    row_invented_months_list = []
    row_avg_invested_amount_list = []
    row_sold_count = []

    for target_annualized_return in [i / 100 for i in range(4, 12, 1)]:
        dump_dir = f"Return_Simulation/Return_Simulation_Timing/buy_and_sell_on_target_return/dump/{ticker}_{invest_years}years_targetAnnualizedReturn_{target_annualized_return}/"
        loaded_dic = utils.load_dump(dump_dir, "asset_list", "asset_result_list", "sold_count_list")
        asset_list = loaded_dic["asset_list"]
        asset_result_list = loaded_dic["asset_result_list"]
        sold_count_list = loaded_dic["sold_count_list"]
        row_min_list.append(f"{int(min(asset_list)):,}")
        row_mean_list.append(f"{int(statistics.mean(asset_list)):,}")
        row_median_list.append(f"{int(statistics.median(asset_list)):,}")
        row_max_list.append(f"{int(max(asset_list)):,}")
        row_sd_list.append(f"{int(statistics.stdev(asset_list)):,}")
        row_sr_list.append(f"{statistics.median(asset_list)/statistics.stdev(asset_list):,.2f}")
        row_invented_months_list.append(asset_result_list[0][1])
        row_avg_invested_amount_list.append(f"{int(asset_result_list[0][2]/asset_result_list[0][1]):,}")
        row_sold_count.append(f"{statistics.mean(sold_count_list):,.1f}")

    table_list = [
        row_min_list,
        row_mean_list,
        row_median_list,
        row_max_list,
        row_sd_list,
        row_sr_list,
        row_invented_months_list,
        row_avg_invested_amount_list,
        row_sold_count
    ]
    print(table_list)
    df = pandas.DataFrame(
        data=table_list,
        index = ["min", "average", "median", "max","SD", "Sharpe Ratio(med/SD)", "invested count", "avg. invested amount", "sold count"],
        columns = [str(i) + "%" for i in range(4, 12, 1)]
                     )
    utils.make_dir(out_dir + "table/")
    table_plot(df, f"{ticker}_{invest_years}", out_dir + f"table/{ticker}_{invest_years}_table.png", )

def plot_table_by_target_return_median(ticker, invest_years):
    def table_plot(df, title, outputPath):
        fig, ax = pyplot.subplots()
        ax.axis('off')

        ax.table(cellText=df.values,
                 colLabels=df.columns,
                 colLoc="center",
                 rowLabels=df.index,
                 rowLoc="center",
                 loc='center',
                 )
        ax.set_title(title)
        ax.text(.5, .5, "generated by lapi\n@Weibo, @Zhihu, @Note", transform=ax.transAxes,
                fontsize=30, color='gray', alpha=0.3,
                ha='center', va='center', rotation=30)
        pyplot.savefig(outputPath)

    target_annualized_return_threshold_low_list = [i / 100 for i in range(-11, 0, 1)]  # -1 means never sell
    target_annualized_return_threshold_high_list = [i / 100 for i in range(4, 12, 1)] + [999]  # 999 means never sell
    table_data = []
    row = []
    for target_annualized_return_threshold_low in target_annualized_return_threshold_low_list:
        row = []
        for target_annualized_return_threshold_high in target_annualized_return_threshold_high_list:
            dump_dir = f"Return_Simulation/Return_Simulation_Timing/buy_and_sell_on_target_return/dump/{ticker}_{invest_years}years_" \
                       f"annualizedReturnLow_{target_annualized_return_threshold_low}_" \
                       f"annualizedReturnHigh_{target_annualized_return_threshold_high}/"
            asset_list = utils.load_dump(dump_dir, "asset_list")["asset_list"]
            row.append(f"{int(statistics.median(asset_list)):,}")
        table_data.append(row)

    print(table_data)
    df = pandas.DataFrame(
        data=table_data,
        index = [i / 100 for i in range(-11, 0, 1)],
        columns = [i / 100 for i in range(4, 12, 1)] + ["never sell"]
                     )
    utils.make_dir(out_dir + "table/")
    table_plot(df, f"{ticker} {invest_years}years sell on target return by PER\n"
                   f"median by column: return_threshold_high, row: return_threshold_low",
               out_dir + f"table/{ticker}_{invest_years}_table_targetReturns_median.png")

def plot_table_by_target_return_median(ticker, invest_years):
    def table_plot(df, title, outputPath):
        fig, ax = pyplot.subplots()
        ax.axis('off')

        ax.table(cellText=df.values,
                 colLabels=df.columns,
                 colLoc="center",
                 rowLabels=df.index,
                 rowLoc="center",
                 loc='center',
                 )
        ax.set_title(title)
        ax.text(.5, .5, "generated by lapi\n@Weibo, @Zhihu, @Note", transform=ax.transAxes,
                fontsize=30, color='gray', alpha=0.3,
                ha='center', va='center', rotation=30)
        pyplot.savefig(outputPath)

    target_annualized_return_threshold_low_list = [-1] + [i / 100 for i in range(-11, 0, 1)]  # -1 means never sell
    target_annualized_return_threshold_high_list = [i / 100 for i in range(4, 12, 1)] # 999 means never sell
    table_data = []
    row = []
    for target_annualized_return_threshold_low in target_annualized_return_threshold_low_list:
        row = []
        for target_annualized_return_threshold_high in target_annualized_return_threshold_high_list:
            dump_dir = f"Return_Simulation/Return_Simulation_Timing/buy_and_sell_on_target_return/dump/{ticker}_{invest_years}years_" \
                       f"annualizedReturnLow_{target_annualized_return_threshold_low}_" \
                       f"annualizedReturnHigh_{target_annualized_return_threshold_high}/"
            asset_list = utils.load_dump(dump_dir, "asset_list")["asset_list"]
            row.append(f"{int(statistics.median(asset_list)):,}")
        table_data.append(row)

    print(table_data)
    df = pandas.DataFrame(
        data=table_data,
        index = ["never sell"] + [f"{i/100:.0%}" for i in range(-11, 0, 1)],
        columns = [f"{i/100:.0%}" for i in range(4, 12, 1)]
                     )
    utils.make_dir(out_dir + "table/")
    table_plot(df, f"{ticker} {invest_years}years sell on target annualized return, median\n"
                   f"column: return_threshold_high, row: return_threshold_low",
               out_dir + f"table/{ticker}_{invest_years}_table_targetReturns_median.png")

def plot_table_by_target_return_SR(ticker, invest_years):
    def table_plot(df, title, outputPath):
        fig, ax = pyplot.subplots()
        ax.axis('off')

        ax.table(cellText=df.values,
                 colLabels=df.columns,
                 colLoc="center",
                 rowLabels=df.index,
                 rowLoc="center",
                 loc='center',
                 )
        ax.set_title(title)
        ax.text(.5, .5, "generated by lapi\n@Weibo, @Zhihu, @Note", transform=ax.transAxes,
                fontsize=30, color='gray', alpha=0.3,
                ha='center', va='center', rotation=30)
        pyplot.savefig(outputPath)

    target_annualized_return_threshold_low_list = [-1] + [i / 100 for i in range(-11, 0, 1)]  # -1 means never sell
    target_annualized_return_threshold_high_list = [i / 100 for i in range(4, 12, 1)] # 999 means never sell
    table_data = []
    row = []
    for target_annualized_return_threshold_low in target_annualized_return_threshold_low_list:
        row = []
        for target_annualized_return_threshold_high in target_annualized_return_threshold_high_list:
            dump_dir = f"Return_Simulation/Return_Simulation_Timing/buy_and_sell_on_target_return/dump/{ticker}_{invest_years}years_" \
                       f"annualizedReturnLow_{target_annualized_return_threshold_low}_" \
                       f"annualizedReturnHigh_{target_annualized_return_threshold_high}/"
            asset_list = utils.load_dump(dump_dir, "asset_list")["asset_list"]
            row.append(f"{statistics.mean(asset_list)/statistics.stdev(asset_list):.1f}")
        table_data.append(row)

    print(table_data)
    df = pandas.DataFrame(
        data=table_data,
        index = ["never sell"] + [f"{i/100:.0%}" for i in range(-11, 0, 1)],
        columns = [f"{i/100:.0%}" for i in range(4, 12, 1)]
                     )
    utils.make_dir(out_dir + "table/")
    table_plot(df, f"{ticker} {invest_years}years sell on target annualized return, Sharpe Ratio\n"
                   f"column: return_threshold_high, row: return_threshold_low",
               out_dir + f"table/{ticker}_{invest_years}_table_targetReturns_SR.png")

if __name__ == '__main__':
    starttime = time.time()
    print("start: {}".format(datetime.datetime.fromtimestamp(starttime).strftime("%H:%M:%S")))
    if not os.path.exists(out_dir):
        os.makedirs(out_dir)
    # for ticker in ["SPX"]:
    #     for invest_years in [30]:
    #         plot_table(ticker, invest_years)
    # for ticker in ["SPX", "SPXL", "SSO"]:
    #     for invest_years in range(10, 60, 10):
    #         plot_return_histogram(ticker, invest_years)
    plot_table_by_target_return_median("SPX", 30)
    plot_table_by_target_return_SR("SPX", 30)
    print("end: {}".format(datetime.datetime.fromtimestamp(time.time()).strftime("%H:%M:%S")))
    time1 = time.time()
    print("経過秒数：{}".format(int(time1 - starttime)))
